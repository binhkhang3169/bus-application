worker_processes auto; # Adjust based on your server's core count
pid /run/nginx.pid;

events {
    worker_connections 1024; # Max connections per worker
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off; # Hide Nginx version

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/vnd.ms-fontobject
        application/wasm
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/calendar
        text/css
        text/javascript
        text/plain
        text/markdown
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Upstream for the API Gateway
    upstream api_gateway_service {
        # This should match the service name and port in your Docker Compose or Kubernetes setup
        # If running locally without docker-compose networking for gateway, use localhost:GATEWAY_PORT
        server api-gateway:8000; # Example: gateway service named 'api-gateway' on port 8000
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _; # Catch all hostnames

        # Optional: Redirect HTTP to HTTPS
        # if ($scheme = http) {
        #     return 301 https://$host$request_uri;
        # }

        location / {

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Length, Content-Type, Authorization, X-Refresh-Token' always; # Hoặc các header mà frontend của bạn thực sự gửi
                # DÒNG QUAN TRỌNG:
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain charset=UTF-8' always;
                add_header 'Content-Length' 0;
                return 204; # Rất quan trọng, Nginx sẽ trả về 204 và không proxy tiếp
            }

            # Xử lý CORS cho Actual requests (không phải OPTIONS)
            if ($request_method != 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
            }


            proxy_pass http://api_gateway_service; # Forward to the Go API Gateway

            # Standard proxy headers
            proxy_set_header Host $host; # Preserve original host
            proxy_set_header X-Real-IP $remote_addr; # Real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # List of IPs including client and proxies
            proxy_set_header X-Forwarded-Proto $scheme; # http or https
            proxy_set_header X-Forwarded-Host $host; # Original host requested by the client
            proxy_set_header X-Forwarded-Port $server_port; # Original port requested by the client

            # WebSocket support (if needed by any backend service)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts (adjust as needed)
            proxy_connect_timeout 60s;
            proxy_send_timeout    60s;
            proxy_read_timeout    60s;

            # Buffer settings (adjust if you have large headers or responses)
            proxy_buffering on;
            proxy_buffers 32 4k; # Number and size of buffers
            proxy_buffer_size 4k; # Size of buffer for the first part of response from upstream
            proxy_busy_buffers_size 8k;
        }

        # Health check for Nginx itself
        location /nginx_health {
            return 200 "Nginx is healthy\n";
            access_log off;
        }
    }

    # HTTPS server configuration (Uncomment and configure if you have SSL certs)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name your.domain.com; # Replace with your domain

    #     ssl_certificate /etc/nginx/ssl/your.domain.com.crt;
    #     ssl_certificate_key /etc/nginx/ssl/your.domain.com.key;

    #     # SSL Ciphers and settings (secure defaults)
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_prefer_server_ciphers on;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 1d;
    #     ssl_session_tickets off;

    #     # HSTS (Optional, but recommended for security)
    #     # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

    #     location / {
    #         proxy_pass http://api_gateway_service;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header X-Forwarded-Host $host;
    #         proxy_set_header X-Forwarded-Port $server_port;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_connect_timeout 60s;
    #         proxy_send_timeout    60s;
    #         proxy_read_timeout    60s;
    #     }
    # }
}