// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// Checks if a list of seats are available (not booked or held).
	AreSeatsAvailable(ctx context.Context, seatIds []int32) ([]AreSeatsAvailableRow, error)
	// Typically checkin for confirmed/paid tickets;
	// Inserts a new checkin record - can now get trip_id from seat_tickets directly.
	CreateCheckin(ctx context.Context, arg CreateCheckinParams) (Checkin, error)
	// For Transactional Outbox Pattern
	CreateOutboxEvent(ctx context.Context, arg CreateOutboxEventParams) error
	// Inserts a new seat for a trip.
	CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error)
	// Links a seat to a ticket, now includes trip_id directly.
	CreateSeatTicket(ctx context.Context, arg CreateSeatTicketParams) (SeatTicket, error)
	// Inserts a new ticket record for both one-way and round-trip.
	CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error)
	// Inserts details for a ticket.
	CreateTicketDetails(ctx context.Context, arg CreateTicketDetailsParams) (TicketDetail, error)
	// Inserts a log entry for a ticket action.
	CreateTicketLog(ctx context.Context, arg CreateTicketLogParams) (TicketLog, error)
	// For the Outbox Poller/Relay
	DeleteOutboxEvents(ctx context.Context, eventIds []uuid.UUID) error
	GetAllCheckinsByTripID(ctx context.Context, tripID string) ([]Checkin, error)
	// Retrieves a paginated list of all tickets, ordered by booking time.
	GetAllTickets(ctx context.Context, arg GetAllTicketsParams) ([]Ticket, error)
	// For the Outbox Poller/Relay
	GetOutboxEvents(ctx context.Context, limit int32) ([]OutboxEvent, error)
	// Retrieves a specific seat by its ID.
	GetSeatByID(ctx context.Context, id int32) (Seat, error)
	// Retrieves seat_ids associated with a ticket_id.
	GetSeatIDsByTicketID(ctx context.Context, ticketID string) ([]int32, error)
	// Retrieves seat_ticket and associated seat details for a given ticket_id.
	GetSeatTicketAndSeatInfoByTicketID(ctx context.Context, ticketID string) (GetSeatTicketAndSeatInfoByTicketIDRow, error)
	// Typically checkin for confirmed/paid tickets
	// Retrieves a specific seat_ticket by its ID - now uses trip_id directly.
	GetSeatTicketByID(ctx context.Context, arg GetSeatTicketByIDParams) (GetSeatTicketByIDRow, error)
	// Retrieves just the status of a seat_ticket.
	GetSeatTicketStatus(ctx context.Context, id int32) (int16, error)
	// Retrieves all seat_ticket entries for a given Ticket_Id, no longer needs JOIN with seats.
	GetSeatTicketsByTicketID(ctx context.Context, ticketID string) ([]GetSeatTicketsByTicketIDRow, error)
	// Retrieves all seat_ticket entries for a given list of Ticket_Ids.
	GetSeatTicketsByTicketIDs(ctx context.Context, ticketIds []string) ([]GetSeatTicketsByTicketIDsRow, error)
	// Retrieves all seats for a given trip_id.
	GetSeatsByTripID(ctx context.Context, tripID string) ([]Seat, error)
	// Retrieves core ticket information by Ticket_Id and Phone.
	GetTicketByPhoneAndIDCore(ctx context.Context, arg GetTicketByPhoneAndIDCoreParams) (Ticket, error)
	// Retrieves core ticket information by Ticket_Id.
	GetTicketCore(ctx context.Context, ticketID string) (Ticket, error)
	// Retrieves all details for a given Ticket_Id.
	GetTicketDetailsByTicketID(ctx context.Context, ticketID string) ([]TicketDetail, error)
	// Retrieves all details for a given list of Ticket_Ids.
	GetTicketDetailsByTicketIDs(ctx context.Context, ticketIds []string) ([]TicketDetail, error)
	// Retrieves just the status of a ticket.
	GetTicketStatus(ctx context.Context, ticketID string) (int16, error)
	// Retrieves all core ticket information for a given Customer_Id.
	GetTicketsByCustomerIDCore(ctx context.Context, customerID sql.NullInt32) ([]Ticket, error)
	// Retrieves the total number of tickets.
	GetTotalTicketCount(ctx context.Context) (int64, error)
	// Checks if a specific seat_id is booked on a specific trip - now uses trip_id directly.
	IsSeatBookedOnTrip(ctx context.Context, arg IsSeatBookedOnTripParams) (bool, error)
	// Checks if a specific seat_id is currently booked or pending (status 0 or 1).
	IsSeatGenerallyBooked(ctx context.Context, seatID int32) (bool, error)
	// Lists all seats for a trip_id that are not in seat_tickets or have status 2 (cancelled).
	ListAvailableSeatsByTripID(ctx context.Context, tripID string) ([]ListAvailableSeatsByTripIDRow, error)
	// Updates the status of a seat_ticket entry by its ID.
	UpdateSeatTicketStatus(ctx context.Context, arg UpdateSeatTicketStatusParams) (SeatTicket, error)
	// Updates the seat_ticket status to 'checked-in'.
	UpdateSeatTicketStatusAfterCheckin(ctx context.Context, arg UpdateSeatTicketStatusAfterCheckinParams) (SeatTicket, error)
	// Updates the status of all seat_ticket entries for a given ticket_id.
	UpdateSeatTicketStatusByTicketID(ctx context.Context, arg UpdateSeatTicketStatusByTicketIDParams) ([]SeatTicket, error)
	// Updates the payment_status and general status of a ticket.
	UpdateTicketPaymentStatus(ctx context.Context, arg UpdateTicketPaymentStatusParams) (Ticket, error)
	// Updates the status of a ticket.
	UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) (Ticket, error)
	// Updates the ticket's main status to 'used'.
	UpdateTicketStatusAfterCheckin(ctx context.Context, arg UpdateTicketStatusAfterCheckinParams) (Ticket, error)
}

var _ Querier = (*Queries)(nil)
