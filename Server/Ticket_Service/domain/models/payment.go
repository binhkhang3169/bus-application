package models

import "time"

// Constants for payment status
const (
	PaymentStatusUnpaid int = 0
)

// TicketStatus defines the possible statuses of a ticket
const (
	TicketStatusPending int16 = 0 // Example: Awaiting payment confirmation
	SeatStatusTemporary int16 = 0
	SeatStatusConfirmed int16 = 1
	SeatStatusCancelled int16 = 2
)

// BookingChannel defines how the ticket was booked
const (
	BookingChannelOnline  int   = 0
	BookingChannelCounter int16 = 1
	BookingChannelStaff   int   = 2 // For tickets created directly by staff
)

type PaymentCallbackInput struct {
	TicketID      string `json:"ticket_id"`
	PaymentStatus int    `json:"payment_status"`
	TransactionID string `json:"transaction_id"`
	PaymentTime   string `json:"payment_time"`
}

// Thêm các loại hàng đợi cho việc xử lý bất đồng bộ
const (
	QueuePaymentTimeout  = "payment_timeout_queue"
	QueueSeatRelease     = "seat_release_queue"
	QueuePaymentCallback = "payment_callback_queue"
)

// Thêm cấu trúc dữ liệu cho webhook callback
type PaymentWebhookData struct {
	TicketID      string    `json:"ticket_id"`
	Amount        int       `json:"amount"`
	PaymentStatus int       `json:"payment_status"`
	TransactionID string    `json:"transaction_id"`
	PaymentTime   time.Time `json:"payment_time"`
	BankCode      string    `json:"bank_code"`
}

// Thêm cấu trúc dữ liệu cho việc đưa vào hàng đợi
type SeatReleaseMessage struct {
	TicketID string `json:"ticket_id"`
	SeatIDs  []int  `json:"seat_ids"`
}

type PaymentTimeoutMessage struct {
	TicketID     string `json:"ticket_id"`
	CustomerID   int    `json:"customer_id"`
	TimeoutAfter int    `json:"timeout_after"` // Seconds
}

// PaymentInitiationInfo holds details for initiating a payment flow.
// This structure is returned by the CreateTicket service method.
type PaymentInitiationInfo struct {
	Type            string `json:"type"` // "url" for redirection (VNPay), "stripe_intent" for Stripe SDK
	URL             string `json:"url,omitempty"`
	ClientSecret    string `json:"client_secret,omitempty"`     // For Stripe
	PaymentIntentID string `json:"payment_intent_id,omitempty"` // For Stripe
	PublishableKey  string `json:"publishable_key,omitempty"`   // Stripe's publishable key, if returned by payment_service
}

// Constants for BookingChannel
// These should align with the values sent in TicketInput.BookingChannel
const (
	BookingChannelWeb int16 = 0 // Typically for VNPay
	BookingChannelApp int16 = 1 // Typically for Stripe
)

// Constants for PaymentStatus
// Ensure these values are consistent with your database schema and application logic.
const (
	PaymentStatusPending int16 = 0 // Payment is initiated but not yet confirmed
	PaymentStatusPaid    int16 = 1 // Payment is successfully completed
	PaymentStatusFailed  int16 = 2 // Payment failed or was cancelled
	// Add other statuses like REFUNDED if needed
)

// Constants for TicketStatus
// Overall status of the ticket.
const (
	TicketStatusPendingConfirmation int16 = 0 // Ticket created, awaiting payment confirmation
	TicketStatusActive              int16 = 1 // Ticket is paid and valid for use
	TicketStatusUsed                int16 = 4 // Ticket has been used (e.g., checked in)
	TicketStatusCancelled           int16 = 2 // Ticket has been cancelled
	TicketStatusExpired             int16 = 5 // Ticket has expired
)

// InitialStripePaymentRequest defines the structure for calling the payment_service's
// Stripe endpoint to create a payment intent.
// This should match the expected request structure of your payment_service.
type InitialStripePaymentRequest struct {
	Amount         int64  `json:"amount"`   // Amount in smallest currency unit (e.g., cents for USD, or base unit for VND)
	Currency       string `json:"currency"` // e.g., "vnd", "usd"
	InvoiceType    string `json:"invoice_type,omitempty"`
	CustomerID     string `json:"customer_id"` // Customer ID as known by your system
	TicketID       string `json:"ticket_id"`   // The ID of the ticket being paid for
	DiscountAmount int64  `json:"discount_amount,omitempty"`
	TaxAmount      int64  `json:"tax_amount,omitempty"`
	Notes          string `json:"notes,omitempty"`
}

// StripePaymentIntentResponse defines the expected structure of the 'data' field
// in the response from payment_service's Stripe create-payment-intent endpoint.
type StripePaymentIntentResponse struct {
	ClientSecret    string `json:"client_secret"`
	PaymentIntentID string `json:"payment_intent_id"`
	InvoiceID       string `json:"invoice_id"`      // Invoice ID generated by payment_service (usually UUID string)
	PublishableKey  string `json:"publishable_key"` // Stripe publishable key
}

// VNPayPaymentResponse defines the expected structure of the 'data' field
// in the response from payment_service's VNPay create-payment endpoint.
type VNPayPaymentResponseData struct {
	PaymentURL string `json:"payment_url"`
	TxnRef     string `json:"txn_ref"`    // VNPay's transaction reference
	InvoiceID  string `json:"invoice_id"` // Invoice ID generated by payment_service
}

// This is the outer structure often returned by services
type VNPayServiceResponse struct {
	Data VNPayPaymentResponseData `json:"data"`
	// Potentially other fields like Code, Message from the payment_service response
}

// TicketInput is referenced from your routes. Ensure BookingChannel is used.
// type TicketInput struct {
// 	CustomerID      int32   `json:"customer_id"`
// 	TicketType      int     `json:"ticket_type"`
// 	Price           float64 `json:"price"`
// 	Status          int16   `json:"status"`          // Initial ticket status from client
// 	PaymentStatus   int16   `json:"payment_status"`  // Initial payment status from client
// 	BookingChannel  int16   `json:"booking_channel"` // 0 for web (VNPay), 1 for app (Stripe)
// 	PolicyID        int32   `json:"policy_id"`
// 	Phone           string  `json:"phone,omitempty"`
// 	Email           string  `json:"email,omitempty"`
// 	Name            string  `json:"name"`
// 	SeatID          []int32 `json:"seat_ids"`
// 	PickupLocation  int32   `json:"pickup_location"`
// 	DropoffLocation int32   `json:"dropoff_location"`
// 	TripID          string  `json:"trip_id"`
// 	BookedBy        string  `json:"booked_by,omitempty"`
// }

// TicketInfoInput (already in your models)
// type TicketInfoInput struct { ... }

// SeatReturn (already in your models)
// type SeatReturn struct { ... }

// TicketReturn (already in your models)
// type TicketReturn struct { ... }

// SeatStatusMessage (already in your models)
// type SeatStatusMessage struct { ... }
