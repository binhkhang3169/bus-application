// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countNews = `-- name: CountNews :one
SELECT COUNT(*) FROM news
`

func (q *Queries) CountNews(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNews)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNews = `-- name: CreateNews :one
INSERT INTO news (
    title,
    image_url,
    content,
    created_by
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, image_url, content, created_by, created_at, updated_at
`

type CreateNewsParams struct {
	Title     string `json:"title"`
	ImageUrl  string `json:"image_url"`
	Content   string `json:"content"`
	CreatedBy string `json:"created_by"`
}

func (q *Queries) CreateNews(ctx context.Context, arg CreateNewsParams) (News, error) {
	row := q.db.QueryRowContext(ctx, createNews,
		arg.Title,
		arg.ImageUrl,
		arg.Content,
		arg.CreatedBy,
	)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.Content,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNews = `-- name: DeleteNews :exec
DELETE FROM news
WHERE id = $1
`

func (q *Queries) DeleteNews(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNews, id)
	return err
}

const getNewsByID = `-- name: GetNewsByID :one
SELECT id, title, image_url, content, created_by, created_at, updated_at FROM news
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNewsByID(ctx context.Context, id uuid.UUID) (News, error) {
	row := q.db.QueryRowContext(ctx, getNewsByID, id)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.Content,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNews = `-- name: ListNews :many
SELECT id, title, image_url, content, created_by, created_at, updated_at FROM news
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListNewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, listNews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []News{}
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImageUrl,
			&i.Content,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNews = `-- name: UpdateNews :one
UPDATE news
SET
    title = $2,
    image_url = $3,
    content = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, image_url, content, created_by, created_at, updated_at
`

type UpdateNewsParams struct {
	ID       uuid.UUID `json:"id"`
	Title    string    `json:"title"`
	ImageUrl string    `json:"image_url"`
	Content  string    `json:"content"`
}

func (q *Queries) UpdateNews(ctx context.Context, arg UpdateNewsParams) (News, error) {
	row := q.db.QueryRowContext(ctx, updateNews,
		arg.ID,
		arg.Title,
		arg.ImageUrl,
		arg.Content,
	)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.Content,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
