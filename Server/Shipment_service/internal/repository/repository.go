package repository

import (
	"context"
	// Ensure this path matches your module name and sqlc output directory
	"shipment-service/internal/db"
)

// ShipmentRepository defines the interface for shipment data operations.
// It uses the db.Querier interface generated by sqlc, which allows it to work
// with both direct database connections and transactions.
// ShipmentRepository defines the interface for shipment data operations.
type ShipmentRepository interface {
	CreateShipment(ctx context.Context, querier db.Querier, arg db.CreateShipmentParams) (db.Shipment, error)
	GetShipmentByID(ctx context.Context, querier db.Querier, id int32) (db.Shipment, error)
	ListShipments(ctx context.Context, querier db.Querier, arg db.ListShipmentsParams) ([]db.Shipment, error)
	ListShipmentsByTripID(ctx context.Context, querier db.Querier, tripID int32) ([]db.Shipment, error)
}

// InvoiceRepository defines the interface for invoice data operations.
type InvoiceRepository interface {
	CreateInvoice(ctx context.Context, querier db.Querier, arg db.CreateInvoiceParams) (db.Invoice, error)
	GetInvoiceByID(ctx context.Context, querier db.Querier, id int32) (db.Invoice, error)
	GetInvoiceByShipmentID(ctx context.Context, querier db.Querier, shipmentID int32) (db.Invoice, error)
	ListInvoices(ctx context.Context, querier db.Querier, arg db.ListInvoicesParams) ([]db.Invoice, error)
	ListInvoicesByTripID(ctx context.Context, querier db.Querier, tripID int32) ([]db.Invoice, error)
}
