// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    shipment_id, amount, issued_at, created_at
) VALUES (
    $1, $2, $3, NOW()
) RETURNING id, shipment_id, amount, issued_at, created_at
`

type CreateInvoiceParams struct {
	ShipmentID int32     `json:"shipment_id"`
	Amount     float64   `json:"amount"`
	IssuedAt   time.Time `json:"issued_at"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice, arg.ShipmentID, arg.Amount, arg.IssuedAt)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Amount,
		&i.IssuedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createShipment = `-- name: CreateShipment :one
INSERT INTO shipments (
    trip_id, sender_name, receiver_name, item_name, item_type,
    weight, length, width, height, volume, price, payer_type, note, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW(), NOW()
) RETURNING id, trip_id, sender_name, receiver_name, item_name, item_type, weight, length, width, height, volume, price, payer_type, note, created_at, updated_at
`

type CreateShipmentParams struct {
	TripID       int32   `json:"trip_id"`
	SenderName   string  `json:"sender_name"`
	ReceiverName string  `json:"receiver_name"`
	ItemName     string  `json:"item_name"`
	ItemType     string  `json:"item_type"`
	Weight       float64 `json:"weight"`
	Length       float64 `json:"length"`
	Width        float64 `json:"width"`
	Height       float64 `json:"height"`
	Volume       float64 `json:"volume"`
	Price        float64 `json:"price"`
	PayerType    string  `json:"payer_type"`
	Note         string  `json:"note"`
}

func (q *Queries) CreateShipment(ctx context.Context, arg CreateShipmentParams) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, createShipment,
		arg.TripID,
		arg.SenderName,
		arg.ReceiverName,
		arg.ItemName,
		arg.ItemType,
		arg.Weight,
		arg.Length,
		arg.Width,
		arg.Height,
		arg.Volume,
		arg.Price,
		arg.PayerType,
		arg.Note,
	)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.SenderName,
		&i.ReceiverName,
		&i.ItemName,
		&i.ItemType,
		&i.Weight,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Volume,
		&i.Price,
		&i.PayerType,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, shipment_id, amount, issued_at, created_at FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id int32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByID, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Amount,
		&i.IssuedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getInvoiceByShipmentID = `-- name: GetInvoiceByShipmentID :one
SELECT id, shipment_id, amount, issued_at, created_at FROM invoices
WHERE shipment_id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByShipmentID(ctx context.Context, shipmentID int32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByShipmentID, shipmentID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Amount,
		&i.IssuedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShipmentByID = `-- name: GetShipmentByID :one
SELECT id, trip_id, sender_name, receiver_name, item_name, item_type, weight, length, width, height, volume, price, payer_type, note, created_at, updated_at FROM shipments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetShipmentByID(ctx context.Context, id int32) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, getShipmentByID, id)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.SenderName,
		&i.ReceiverName,
		&i.ItemName,
		&i.ItemType,
		&i.Weight,
		&i.Length,
		&i.Width,
		&i.Height,
		&i.Volume,
		&i.Price,
		&i.PayerType,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, shipment_id, amount, issued_at, created_at FROM invoices
ORDER BY issued_at DESC
LIMIT $1
OFFSET $2
`

type ListInvoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.ShipmentID,
			&i.Amount,
			&i.IssuedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoicesByTripID = `-- name: ListInvoicesByTripID :many
SELECT inv.id, inv.shipment_id, inv.amount, inv.issued_at, inv.created_at FROM invoices inv
JOIN shipments s ON inv.shipment_id = s.id
WHERE s.trip_id = $1
ORDER BY inv.issued_at DESC
`

func (q *Queries) ListInvoicesByTripID(ctx context.Context, tripID int32) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoicesByTripID, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.ShipmentID,
			&i.Amount,
			&i.IssuedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShipments = `-- name: ListShipments :many
SELECT id, trip_id, sender_name, receiver_name, item_name, item_type, weight, length, width, height, volume, price, payer_type, note, created_at, updated_at FROM shipments
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListShipmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShipments(ctx context.Context, arg ListShipmentsParams) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipment{}
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.SenderName,
			&i.ReceiverName,
			&i.ItemName,
			&i.ItemType,
			&i.Weight,
			&i.Length,
			&i.Width,
			&i.Height,
			&i.Volume,
			&i.Price,
			&i.PayerType,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShipmentsByTripID = `-- name: ListShipmentsByTripID :many
SELECT id, trip_id, sender_name, receiver_name, item_name, item_type, weight, length, width, height, volume, price, payer_type, note, created_at, updated_at FROM shipments
WHERE trip_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListShipmentsByTripID(ctx context.Context, tripID int32) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipmentsByTripID, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipment{}
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.SenderName,
			&i.ReceiverName,
			&i.ItemName,
			&i.ItemType,
			&i.Weight,
			&i.Length,
			&i.Width,
			&i.Height,
			&i.Volume,
			&i.Price,
			&i.PayerType,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
