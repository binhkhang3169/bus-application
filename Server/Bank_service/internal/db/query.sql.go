// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1, updated_at = now()
WHERE owner_name = $2
RETURNING id, owner_name, balance, currency, status, created_at, updated_at
`

type AddAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner_name,
  balance,
  currency,
  status
) VALUES (
  $1, $2, $3, $4
) RETURNING id, owner_name, balance, currency, status, created_at, updated_at
`

type CreateAccountParams struct {
	OwnerName string `json:"owner_name"`
	Balance   int64  `json:"balance"`
	Currency  string `json:"currency"`
	Status    string `json:"status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.OwnerName,
		arg.Balance,
		arg.Currency,
		arg.Status,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTransactionHistory = `-- name: CreateTransactionHistory :one
INSERT INTO transaction_history (
  account_id,
  transaction_type,
  amount,
  currency,
  description
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, account_id, transaction_type, amount, currency, description, created_at
`

type CreateTransactionHistoryParams struct {
	AccountID       int64          `json:"account_id"`
	TransactionType string         `json:"transaction_type"`
	Amount          sql.NullInt64  `json:"amount"`
	Currency        sql.NullString `json:"currency"`
	Description     string         `json:"description"`
}

func (q *Queries) CreateTransactionHistory(ctx context.Context, arg CreateTransactionHistoryParams) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, createTransactionHistory,
		arg.AccountID,
		arg.TransactionType,
		arg.Amount,
		arg.Currency,
		arg.Description,
	)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransactionType,
		&i.Amount,
		&i.Currency,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE owner_name = $1
`

// Thực tế không xóa, chỉ dùng để minh họa, chúng ta sẽ dùng UpdateAccountStatus
func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner_name, balance, currency, status, created_at, updated_at FROM accounts
WHERE owner_name = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner_name, balance, currency, status, created_at, updated_at FROM accounts
WHERE owner_name = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many

SELECT id, owner_name, balance, currency, status, created_at, updated_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Để tránh deadlock khi cập nhật balance
func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.OwnerName,
			&i.Balance,
			&i.Currency,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionHistoryByAccountID = `-- name: ListTransactionHistoryByAccountID :many
SELECT id, account_id, transaction_type, amount, currency, description, created_at FROM transaction_history
WHERE account_id = $1
ORDER BY created_at DESC -- Show newest first
LIMIT $2
OFFSET $3
`

type ListTransactionHistoryByAccountIDParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListTransactionHistoryByAccountID(ctx context.Context, arg ListTransactionHistoryByAccountIDParams) ([]TransactionHistory, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionHistoryByAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionHistory{}
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.TransactionType,
			&i.Amount,
			&i.Currency,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts
SET balance = $2, updated_at = now()
WHERE owner_name = $1
RETURNING id, owner_name, balance, currency, status, created_at, updated_at
`

type UpdateAccountBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountStatus = `-- name: UpdateAccountStatus :one
UPDATE accounts
SET status = $2, updated_at = now()
WHERE owner_name = $1
RETURNING id, owner_name, balance, currency, status, created_at, updated_at
`

type UpdateAccountStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAccountStatus(ctx context.Context, arg UpdateAccountStatusParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountStatus, arg.ID, arg.Status)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
