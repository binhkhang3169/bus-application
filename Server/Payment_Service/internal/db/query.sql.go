// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    invoice_id,
    invoice_number,
    invoice_type,
    customer_id,
    ticket_id,
    total_amount,
    discount_amount,
    tax_amount,
    final_amount,
    currency,
    payment_status,
    payment_method,
    issue_date,
    notes,
    -- vnpay fields
    vnpay_txn_ref,
    vnpay_bank_code,
    vnpay_txn_no,
    vnpay_pay_date,
    -- stripe fields
    stripe_payment_intent_id,
    stripe_charge_id,
    stripe_customer_id,
    stripe_payment_method_details,
    -- bank transfer fields
    bank_transfer_code,
    bank_payment_details -- Other bank fields like account_name, account_number, bank_name might be updated later upon confirmation
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24
) RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type CreateInvoiceParams struct {
	InvoiceID                  uuid.UUID      `json:"invoice_id"`
	InvoiceNumber              string         `json:"invoice_number"`
	InvoiceType                sql.NullString `json:"invoice_type"`
	CustomerID                 string         `json:"customer_id"`
	TicketID                   string         `json:"ticket_id"`
	TotalAmount                float64        `json:"total_amount"`
	DiscountAmount             sql.NullString `json:"discount_amount"`
	TaxAmount                  sql.NullString `json:"tax_amount"`
	FinalAmount                float64        `json:"final_amount"`
	Currency                   sql.NullString `json:"currency"`
	PaymentStatus              sql.NullString `json:"payment_status"`
	PaymentMethod              sql.NullString `json:"payment_method"`
	IssueDate                  sql.NullTime   `json:"issue_date"`
	Notes                      string         `json:"notes"`
	VnpayTxnRef                sql.NullString `json:"vnpay_txn_ref"`
	VnpayBankCode              sql.NullString `json:"vnpay_bank_code"`
	VnpayTxnNo                 sql.NullString `json:"vnpay_txn_no"`
	VnpayPayDate               sql.NullString `json:"vnpay_pay_date"`
	StripePaymentIntentID      sql.NullString `json:"stripe_payment_intent_id"`
	StripeChargeID             sql.NullString `json:"stripe_charge_id"`
	StripeCustomerID           sql.NullString `json:"stripe_customer_id"`
	StripePaymentMethodDetails string         `json:"stripe_payment_method_details"`
	BankTransferCode           sql.NullString `json:"bank_transfer_code"`
	BankPaymentDetails         string         `json:"bank_payment_details"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.InvoiceID,
		arg.InvoiceNumber,
		arg.InvoiceType,
		arg.CustomerID,
		arg.TicketID,
		arg.TotalAmount,
		arg.DiscountAmount,
		arg.TaxAmount,
		arg.FinalAmount,
		arg.Currency,
		arg.PaymentStatus,
		arg.PaymentMethod,
		arg.IssueDate,
		arg.Notes,
		arg.VnpayTxnRef,
		arg.VnpayBankCode,
		arg.VnpayTxnNo,
		arg.VnpayPayDate,
		arg.StripePaymentIntentID,
		arg.StripeChargeID,
		arg.StripeCustomerID,
		arg.StripePaymentMethodDetails,
		arg.BankTransferCode,
		arg.BankPaymentDetails,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const getInvoiceByBankTransferCode = `-- name: GetInvoiceByBankTransferCode :one
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE bank_transfer_code = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByBankTransferCode(ctx context.Context, bankTransferCode sql.NullString) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByBankTransferCode, bankTransferCode)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE invoice_id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, invoiceID uuid.UUID) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByID, invoiceID)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const getInvoiceByStripePaymentIntentID = `-- name: GetInvoiceByStripePaymentIntentID :one
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE stripe_payment_intent_id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID sql.NullString) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByStripePaymentIntentID, stripePaymentIntentID)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const getInvoiceByVNPayTxnRef = `-- name: GetInvoiceByVNPayTxnRef :one
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE vnpay_txn_ref = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByVNPayTxnRef(ctx context.Context, vnpayTxnRef sql.NullString) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByVNPayTxnRef, vnpayTxnRef)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const getLatestCompletedInvoiceByTicketID = `-- name: GetLatestCompletedInvoiceByTicketID :one
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE ticket_id = $1 AND payment_status = 'COMPLETED'
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestCompletedInvoiceByTicketID(ctx context.Context, ticketID string) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getLatestCompletedInvoiceByTicketID, ticketID)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const listInvoicesByCustomerID = `-- name: ListInvoicesByCustomerID :many
SELECT invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details FROM invoices
WHERE customer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListInvoicesByCustomerID(ctx context.Context, customerID string) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoicesByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.InvoiceNumber,
			&i.InvoiceType,
			&i.CustomerID,
			&i.TicketID,
			&i.TotalAmount,
			&i.DiscountAmount,
			&i.TaxAmount,
			&i.FinalAmount,
			&i.Currency,
			&i.PaymentStatus,
			&i.PaymentMethod,
			&i.IssueDate,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VnpayTxnRef,
			&i.VnpayBankCode,
			&i.VnpayTxnNo,
			&i.VnpayPayDate,
			&i.StripePaymentIntentID,
			&i.StripeChargeID,
			&i.StripeCustomerID,
			&i.StripePaymentMethodDetails,
			&i.BankTransferCode,
			&i.BankAccountName,
			&i.BankAccountNumber,
			&i.BankName,
			&i.BankTransactionID,
			&i.BankPaymentDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceBankPaymentConfirmation = `-- name: UpdateInvoiceBankPaymentConfirmation :one
UPDATE invoices
SET
    payment_status = $2, -- 'COMPLETED'
    bank_account_name = $3,
    bank_account_number = $4,
    bank_name = $5,
    bank_transaction_id = $6,
    bank_payment_details = $7, -- Append confirmation details
    notes = $8, -- Append confirmation notes
    updated_at = NOW()
WHERE invoice_id = $1 -- Could also be bank_transfer_code
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceBankPaymentConfirmationParams struct {
	InvoiceID          uuid.UUID      `json:"invoice_id"`
	PaymentStatus      sql.NullString `json:"payment_status"`
	BankAccountName    sql.NullString `json:"bank_account_name"`
	BankAccountNumber  sql.NullString `json:"bank_account_number"`
	BankName           sql.NullString `json:"bank_name"`
	BankTransactionID  sql.NullString `json:"bank_transaction_id"`
	BankPaymentDetails string         `json:"bank_payment_details"`
	Notes              string         `json:"notes"`
}

// Used when an admin/system confirms a bank payment
func (q *Queries) UpdateInvoiceBankPaymentConfirmation(ctx context.Context, arg UpdateInvoiceBankPaymentConfirmationParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceBankPaymentConfirmation,
		arg.InvoiceID,
		arg.PaymentStatus,
		arg.BankAccountName,
		arg.BankAccountNumber,
		arg.BankName,
		arg.BankTransactionID,
		arg.BankPaymentDetails,
		arg.Notes,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoiceBankPaymentRequest = `-- name: UpdateInvoiceBankPaymentRequest :one
UPDATE invoices
SET
    payment_method = $2, -- 'BANK'
    payment_status = $3, -- 'AWAITING_CONFIRMATION' or 'PENDING'
    bank_transfer_code = $4, -- The code the user should use for the transfer
    notes = $5, -- Instructions for bank payment
    updated_at = NOW()
WHERE invoice_id = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceBankPaymentRequestParams struct {
	InvoiceID        uuid.UUID      `json:"invoice_id"`
	PaymentMethod    sql.NullString `json:"payment_method"`
	PaymentStatus    sql.NullString `json:"payment_status"`
	BankTransferCode sql.NullString `json:"bank_transfer_code"`
	Notes            string         `json:"notes"`
}

// Used when creating a bank payment request (invoice is PENDING or AWAITING_CONFIRMATION)
func (q *Queries) UpdateInvoiceBankPaymentRequest(ctx context.Context, arg UpdateInvoiceBankPaymentRequestParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceBankPaymentRequest,
		arg.InvoiceID,
		arg.PaymentMethod,
		arg.PaymentStatus,
		arg.BankTransferCode,
		arg.Notes,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoicePaymentFailed = `-- name: UpdateInvoicePaymentFailed :one
UPDATE invoices
SET
    payment_status = $2, -- 'FAILED'
    notes = $3, -- Reason for failure
    updated_at = NOW()
WHERE invoice_id = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoicePaymentFailedParams struct {
	InvoiceID     uuid.UUID      `json:"invoice_id"`
	PaymentStatus sql.NullString `json:"payment_status"`
	Notes         string         `json:"notes"`
}

// Update status when payment fails (generic for Stripe, VNPay, or Bank based on invoice_id)
func (q *Queries) UpdateInvoicePaymentFailed(ctx context.Context, arg UpdateInvoicePaymentFailedParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoicePaymentFailed, arg.InvoiceID, arg.PaymentStatus, arg.Notes)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoiceStatusGeneral = `-- name: UpdateInvoiceStatusGeneral :one
UPDATE invoices
SET
    payment_status = $2,
    notes = $3, -- Notes for refund, cancellation, etc.
    updated_at = NOW()
WHERE invoice_id = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceStatusGeneralParams struct {
	InvoiceID     uuid.UUID      `json:"invoice_id"`
	PaymentStatus sql.NullString `json:"payment_status"`
	Notes         string         `json:"notes"`
}

// Update general status (e.g., REFUNDED, CANCELED)
func (q *Queries) UpdateInvoiceStatusGeneral(ctx context.Context, arg UpdateInvoiceStatusGeneralParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStatusGeneral, arg.InvoiceID, arg.PaymentStatus, arg.Notes)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoiceStripePaymentIntent = `-- name: UpdateInvoiceStripePaymentIntent :one
UPDATE invoices
SET
    stripe_payment_intent_id = $2,
    payment_method = $3, -- 'STRIPE'
    payment_status = $4, -- 'PENDING' or 'REQUIRES_PAYMENT_METHOD'
    updated_at = NOW()
WHERE invoice_id = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceStripePaymentIntentParams struct {
	InvoiceID             uuid.UUID      `json:"invoice_id"`
	StripePaymentIntentID sql.NullString `json:"stripe_payment_intent_id"`
	PaymentMethod         sql.NullString `json:"payment_method"`
	PaymentStatus         sql.NullString `json:"payment_status"`
}

// Used when creating Payment Intent and need to update invoice with PI ID
func (q *Queries) UpdateInvoiceStripePaymentIntent(ctx context.Context, arg UpdateInvoiceStripePaymentIntentParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStripePaymentIntent,
		arg.InvoiceID,
		arg.StripePaymentIntentID,
		arg.PaymentMethod,
		arg.PaymentStatus,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoiceStripePaymentSuccess = `-- name: UpdateInvoiceStripePaymentSuccess :one
UPDATE invoices
SET
    payment_status = $2,
    stripe_charge_id = $3,
    stripe_payment_method_details = $4,
    updated_at = NOW()
WHERE stripe_payment_intent_id = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceStripePaymentSuccessParams struct {
	StripePaymentIntentID      sql.NullString `json:"stripe_payment_intent_id"`
	PaymentStatus              sql.NullString `json:"payment_status"`
	StripeChargeID             sql.NullString `json:"stripe_charge_id"`
	StripePaymentMethodDetails string         `json:"stripe_payment_method_details"`
}

func (q *Queries) UpdateInvoiceStripePaymentSuccess(ctx context.Context, arg UpdateInvoiceStripePaymentSuccessParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStripePaymentSuccess,
		arg.StripePaymentIntentID,
		arg.PaymentStatus,
		arg.StripeChargeID,
		arg.StripePaymentMethodDetails,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}

const updateInvoiceVNPayStatus = `-- name: UpdateInvoiceVNPayStatus :one
UPDATE invoices
SET
    payment_status = $2,
    vnpay_bank_code = $3,
    vnpay_txn_no = $4,
    vnpay_pay_date = $5,
    updated_at = NOW()
WHERE vnpay_txn_ref = $1
RETURNING invoice_id, invoice_number, invoice_type, customer_id, ticket_id, total_amount, discount_amount, tax_amount, final_amount, currency, payment_status, payment_method, issue_date, notes, created_at, updated_at, vnpay_txn_ref, vnpay_bank_code, vnpay_txn_no, vnpay_pay_date, stripe_payment_intent_id, stripe_charge_id, stripe_customer_id, stripe_payment_method_details, bank_transfer_code, bank_account_name, bank_account_number, bank_name, bank_transaction_id, bank_payment_details
`

type UpdateInvoiceVNPayStatusParams struct {
	VnpayTxnRef   sql.NullString `json:"vnpay_txn_ref"`
	PaymentStatus sql.NullString `json:"payment_status"`
	VnpayBankCode sql.NullString `json:"vnpay_bank_code"`
	VnpayTxnNo    sql.NullString `json:"vnpay_txn_no"`
	VnpayPayDate  sql.NullString `json:"vnpay_pay_date"`
}

func (q *Queries) UpdateInvoiceVNPayStatus(ctx context.Context, arg UpdateInvoiceVNPayStatusParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceVNPayStatus,
		arg.VnpayTxnRef,
		arg.PaymentStatus,
		arg.VnpayBankCode,
		arg.VnpayTxnNo,
		arg.VnpayPayDate,
	)
	var i Invoice
	err := row.Scan(
		&i.InvoiceID,
		&i.InvoiceNumber,
		&i.InvoiceType,
		&i.CustomerID,
		&i.TicketID,
		&i.TotalAmount,
		&i.DiscountAmount,
		&i.TaxAmount,
		&i.FinalAmount,
		&i.Currency,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.IssueDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VnpayTxnRef,
		&i.VnpayBankCode,
		&i.VnpayTxnNo,
		&i.VnpayPayDate,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.StripeCustomerID,
		&i.StripePaymentMethodDetails,
		&i.BankTransferCode,
		&i.BankAccountName,
		&i.BankAccountNumber,
		&i.BankName,
		&i.BankTransactionID,
		&i.BankPaymentDetails,
	)
	return i, err
}
