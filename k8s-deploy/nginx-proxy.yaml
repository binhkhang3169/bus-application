# File: nginx-proxy.yaml

# --- Bước 1: Tạo ConfigMap để chứa file nginx.conf ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    worker_processes auto;
    pid /run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;
        error_log   /var/log/nginx/error.log;

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        gzip on;
        gzip_disable "msie6";
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_min_length 256;
        gzip_types
            application/atom+xml application/geo+json application/javascript
            application/x-javascript application/json application/ld+json
            application/manifest+json application/rdf+xml application/rss+xml
            application/vnd.ms-fontobject application/wasm
            application/x-web-app-manifest+json application/xhtml+xml
            application/xml font/eot font/otf font/ttf image/bmp
            image/svg+xml image/x-icon text/cache-manifest text/calendar
            text/css text/javascript text/plain text/markdown text/vcard
            text/vnd.rim.location.xloc text/vtt text/x-component
            text/x-cross-domain-policy;

        # Upstream trỏ tới K8S Service của API Gateway
        upstream api_gateway_service {
            # QUAN TRỌNG: Tên này phải khớp với tên Service của API Gateway trong K8S
            server api-gateway-service:8000;
        }

        server {
            listen 80;
            server_name _;

            # Đặt CORS origin dựa trên request origin
            set $cors_origin "";
            if ($http_origin = "http://localhost:3000") {
                set $cors_origin "http://localhost:3000";
            }
            if ($http_origin = "http://bink3169.me") {
                set $cors_origin "http://bink3169.me";
            }

            location / {
              # Xử lý CORS Preflight request
              if ($request_method = 'OPTIONS') {
                  add_header 'Access-Control-Allow-Origin' $cors_origin always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'Origin, Content-Length, Content-Type, Authorization, X-Refresh-Token' always;
                  add_header 'Access-Control-Allow-Credentials' 'true' always;
                  add_header 'Access-Control-Max-Age' 1728000 always;
                  add_header 'Content-Type' 'text/plain charset=UTF-8' always;
                  add_header 'Content-Length' 0;
                  return 204;
              }
              # Xử lý CORS cho Actual request
              if ($request_method != 'OPTIONS') {
                  add_header 'Access-Control-Allow-Origin' $cors_origin always;
                  add_header 'Access-Control-Allow-Credentials' 'true' always;
              }
              proxy_pass http://api_gateway_service;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
           }

            location /nginx_health {
                return 200 "Nginx is healthy\n";
                access_log off;
            }
        }
    }

---
# --- Bước 2: Tạo Deployment để chạy Nginx ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy-deployment
spec:
  replicas: 2 # Chạy 2 bản sao để tăng tính sẵn sàng
  selector:
    matchLabels:
      app: nginx-proxy
  template:
    metadata:
      labels:
        app: nginx-proxy
    spec:
      containers:
        - name: nginx
          image: nginx:1.25-alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf # Mount file nginx.conf từ ConfigMap
              readOnly: true
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config # Tên của ConfigMap đã tạo ở trên
            items:
              - key: nginx.conf
                path: nginx.conf

---
# --- Bước 3: Tạo Service LoadBalancer để expose Nginx ra internet ---
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  selector:
    app: nginx-proxy # Phải khớp với label của Nginx Pod
  ports:
    - name: http
      protocol: TCP
      port: 80 # Port public bên ngoài
      targetPort: 80 # Port của container Nginx
  type: LoadBalancer # Sẽ tự động tạo một Public IP mới
